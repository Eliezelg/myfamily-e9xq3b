# Prometheus Helm Chart Values Configuration
# Chart Version: 15.10.0
# Application: MyFamily Platform Monitoring

server:
  # High availability deployment with 2 replicas
  replicas: 2
  
  image:
    repository: prom/prometheus
    tag: v2.42.0
    pullPolicy: IfNotPresent
  
  # 30 day retention period for metrics
  retention: 30d
  
  persistentVolume:
    enabled: true
    size: 50Gi
    # Using encrypted GP3 storage for security
    storageClass: gp3-encrypted
  
  # Resource allocation for Prometheus server
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 4Gi

# Alert Manager configuration for notification delivery
alertmanager:
  enabled: true
  replicas: 2
  persistence:
    enabled: true
    size: 10Gi

# Service Monitor configuration for scraping metrics
serviceMonitors:
  enabled: true
  selectors:
    prometheus: myfamily-monitoring
  namespaceSelector:
    any: true

# Enable Kubernetes state metrics collection
kubeStateMetrics:
  enabled: true

# Node exporter for hardware and OS metrics
nodeExporter:
  enabled: true
  tolerations:
    - operator: Exists

# Push gateway for batch job metrics
pushgateway:
  enabled: true

# Prometheus server configuration files
serverFiles:
  prometheus.yml:
    scrape_configs:
      # Kubernetes pods monitoring
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
      
      # Kubernetes nodes monitoring
      - job_name: kubernetes-nodes
        kubernetes_sd_configs:
          - role: node

  # Alert rules configuration
  alerting_rules.yml:
    groups:
      - name: platform-alerts
        rules:
          # High latency alert (>3s response time)
          - alert: HighLatency
            expr: http_request_duration_seconds > 3
            for: 5m
            labels:
              severity: critical
          
          # Low uptime alert (<99.9% availability)
          - alert: LowUptime
            expr: avg_over_time(up[5m]) < 0.999
            for: 5m
            labels:
              severity: critical

# Ingress configuration for external access
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - prometheus.myfamily.com
  tls:
    - secretName: prometheus-tls
      hosts:
        - prometheus.myfamily.com

# Network policies for security
networkPolicy:
  enabled: true
  ingress:
    allowed:
      - namespaces:
          - production
          - staging
          - system