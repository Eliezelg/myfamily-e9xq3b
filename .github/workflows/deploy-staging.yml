name: Deploy to Staging

on:
  push:
    branches:
      - develop

env:
  NAMESPACE: staging
  CLUSTER_NAME: myfamily-staging
  AWS_REGION: us-east-1
  DOCKER_REGISTRY: myfamily
  TEST_COVERAGE_THRESHOLD: 80
  MAX_DEPLOYMENT_TIME: 300
  RESOURCE_QUOTA_CPU: 4
  RESOURCE_QUOTA_MEMORY: 8Gi

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: |
          npm run test:unit -- --coverage
          if [ $(jq -r '.total.lines.pct' coverage/coverage-summary.json) -lt ${{ env.TEST_COVERAGE_THRESHOLD }} ]; then
            echo "Test coverage below threshold of ${{ env.TEST_COVERAGE_THRESHOLD }}%"
            exit 1
          fi

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage/

  security-scan:
    name: Security Scanning
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'MyFamily'
          path: '.'
          format: 'HTML'
          failOnCVSS: 7

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            dependency-check-report.html

  build:
    name: Build and Push Images
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push API Gateway
        uses: docker/build-push-action@v3
        with:
          context: ./services/api-gateway
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ github.sha }}

      - name: Build and push Auth Service
        uses: docker/build-push-action@v3
        with:
          context: ./services/auth-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/auth-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ github.sha }}

      - name: Build and push Content Service
        uses: docker/build-push-action@v3
        with:
          context: ./services/content-service
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/content-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VERSION=${{ github.sha }}

  deploy:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1

      - name: Deploy API Gateway
        run: |
          helm upgrade --install api-gateway ./infrastructure/kubernetes/services/api-gateway \
            --namespace ${{ env.NAMESPACE }} \
            --set image.tag=${{ github.sha }} \
            --values ./infrastructure/kubernetes/services/api-gateway/values.yaml \
            --timeout ${{ env.MAX_DEPLOYMENT_TIME }}s \
            --wait

      - name: Deploy Auth Service
        run: |
          helm upgrade --install auth-service ./infrastructure/kubernetes/services/auth-service \
            --namespace ${{ env.NAMESPACE }} \
            --set image.tag=${{ github.sha }} \
            --values ./infrastructure/kubernetes/services/auth-service/values.yaml \
            --timeout ${{ env.MAX_DEPLOYMENT_TIME }}s \
            --wait

      - name: Deploy Content Service
        run: |
          helm upgrade --install content-service ./infrastructure/kubernetes/services/content-service \
            --namespace ${{ env.NAMESPACE }} \
            --set image.tag=${{ github.sha }} \
            --values ./infrastructure/kubernetes/services/content-service/values.yaml \
            --timeout ${{ env.MAX_DEPLOYMENT_TIME }}s \
            --wait

      - name: Verify deployments
        run: |
          kubectl rollout status deployment/api-gateway -n ${{ env.NAMESPACE }} --timeout=${{ env.MAX_DEPLOYMENT_TIME }}s
          kubectl rollout status deployment/auth-service -n ${{ env.NAMESPACE }} --timeout=${{ env.MAX_DEPLOYMENT_TIME }}s
          kubectl rollout status deployment/content-service -n ${{ env.NAMESPACE }} --timeout=${{ env.MAX_DEPLOYMENT_TIME }}s

      - name: Run smoke tests
        run: |
          chmod +x ./tests/smoke/run.sh
          ./tests/smoke/run.sh ${{ env.NAMESPACE }}

      - name: Monitor deployment health
        run: |
          for i in {1..5}; do
            kubectl get pods -n ${{ env.NAMESPACE }} | grep -i crash && exit 1
            kubectl top pods -n ${{ env.NAMESPACE }}
            sleep 60
          done

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}